generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model company {
  id          String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description String?    @db.VarChar(255)
  image       String?    @db.VarChar(255)
  name        String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  user_id     String     @db.Uuid
  tenant_id   String     @db.VarChar(255)
  user        user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  location    location[]
  skill       skill[]
}

model location {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  latitude   String   @db.VarChar(255)
  longitude  String   @db.VarChar(255)
  company_id String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  company    company? @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model message {
  id                             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content                        String   @db.VarChar(255)
  sender_id                      String?  @db.Uuid
  receiver_id                    String?  @db.Uuid
  created_at                     DateTime @default(now()) @db.Timestamp(6)
  updated_at                     DateTime @default(now()) @db.Timestamp(6)
  user_message_receiver_idTouser user?    @relation("message_receiver_idTouser", fields: [receiver_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_message_sender_idTouser   user?    @relation("message_sender_idTouser", fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model skill {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name       String   @db.VarChar(255)
  company_id String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  company    company? @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                             String    @unique @db.VarChar(255)
  firstName                         String?   @db.VarChar(255)
  lastName                          String?   @db.VarChar(255)
  roq_user_id                       String    @db.VarChar(255)
  tenant_id                         String    @db.VarChar(255)
  created_at                        DateTime  @default(now()) @db.Timestamp(6)
  updated_at                        DateTime  @default(now()) @db.Timestamp(6)
  company                           company[]
  message_message_receiver_idTouser message[] @relation("message_receiver_idTouser")
  message_message_sender_idTouser   message[] @relation("message_sender_idTouser")
}
